<roblox xmlns:xmime="http://www.w3.org/2005/05/xmlmime" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.roblox.com/roblox.xsd" version="4"><Item class="ModuleScript"><Properties><string name="Name">MainModule</string><ProtectedString name="Source">-- Conglomeration
-- See https://Conglomeration.github.io/About for more information.

-- @license MIT
-- MIT License (&lt;https://astolfodev.mit-license.org/&gt;)
--
-- Copyright © 2021 AstolfoDev &lt;AstolfoDev@wafflepowered.com&gt;, Mokiy &lt;mokiy@wafflepowered.com&gt;
--
-- Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
--
-- The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
--
-- THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

-- @minified
-- @generated
-- @source https://github.com/Conglomeration/Lua
-- @version 0.1.2-beta.1

local d=require;local a=math;local n=bit or bit32;local l=error;local t=table;local r=string;local c=pairs;local o=setmetatable;local e=print;local s=tonumber;local f=ipairs;local u=(getfenv or function()return _ENV end)();local e={["searchers"]={[2]=function(n)l("Module not bundled: "..n)end}}if _VERSION=="Luau"then
d=(function(...)return e["searchers"][2](...)()end);a=o({["mod"]=a.fmod},{__index=u.math})end
do
local e=e.searchers or e.loaders
local b=e[2]e[2]=function(u)local n={["util"]=function()local n={}n.forEach=function(n,e)for o,n in c(n)do
e(n,o)end
end;n.split_fast=function(l,e)if e==nil then e='%s'end
local o={}for n in r.gmatch(l,'([^'..e..']+)')do t.insert(o,n)end
return o
end
n.split=function(o,n)n=n or'%s'local e={}for n,o in r.gmatch(o,'([^'..n..']*)('..n..'?)')do
t.insert(e,n)if o==''then return e end
end
end
return n
end,["Parsers"]=function()local e=d('util')local o=d('CFrameSerializer')local n=function(n,e,o)return{[0]=n:lower();[1]=o;[2]=e}end
local n={n('color3',function(n)return n.R..'\6'..n.G..'\6'..n.B end,function(n)return Color3.new(e.split_fast(n,'\6'))end);n('nil',function()end,function()return''end);n('null',function()end,function()return''end);n('undefined',function()end,function()return''end);n('String',function(n)return n end,function(n)return n end);n('Number',function(n)return tostring(n)end,function(n)return s(n)end);n('function',function(n)warn('Unable to encode functions. Encoding functions will not be added in a future version.\nPlease implement your own lua bytecode parser and use a string to transmit this data.\nReturning nothing')return'';end,function(n)return function()l('SECURITY: Cannot parse functions.',2)end;end);n('UserData',function()return{};end,function()warn('Cannot encode UserDatas - Try adding a parser/encoder to Conglomeration for this specific type. Encoding as an empty table.')return'';end);n('UDim',function(n)return n.Scale..'\6'..n.Offset end,function(n)local n=e.split_fast(n,'\6')return UDim.new(n[1],n[2])end);n('UDim2',function(n)return n.X.Scale..'\6'..n.Y.Scale..'\6'..n.X.Offset..'\6'..n.Y.Offset end,function(n)local n=e.split_fast(n,'\6')return UDim2.new(n[1],n[3],n[2],n[4])end);n('Vector3',function(n)return n.X..'\6'..n.Y..'\6'..n.Z end,function(n)local n=e.split_fast(n,'\6')return Vector3.new(n[1],n[2],n[3])end);n('Vector2',function(n)return n.X..'\6'..n.Y end,function(n)local n=e.split_fast(n,'\6')return Vector2.new(n[1],n[2])end);n('CFrame',function(n)return o:EncodeCFrame(n)end,function(n)return o:DecodeCFrame(n)end);}return n
end,["Base64"]=function()local u={}local e={'A';'B';'C';'D';'E';'F';'G';'H';'I';'J';'K';'L';'M';'N';'O';'P';'Q';'R';'S';'T';'U';'V';'W';'X';'Y';'Z';'a';'b';'c';'d';'e';'f';'g';'h';'i';'j';'k';'l';'m';'n';'o';'p';'q';'r';'s';'t';'u';'v';'w';'x';'y';'z';'0';'1';'2';'3';'4';'5';'6';'7';'8';'9';'+';'/';}local o={}for n,e in f(e)do
o[e]=n-1
end
local d='='local function f(n)return e[n+1]end
local function c(n)return o[n]end
function u.encode(e)local r={e:byte(i,#e)}local e={}local l=1
while l&lt;=#r-2 do
local t=0
local o=n.blshift(r[l],16)o=n.band(o,16711680)t=n.bor(t,o)o=n.blshift(r[l+1],8)o=n.band(o,65280)t=n.bor(t,o)o=n.band(r[l+2],255)t=n.bor(t,o)o=n.blogic_rshift(t,18)o=n.band(o,63)e[#e+1]=f(o)o=n.blogic_rshift(t,12)o=n.band(o,63)e[#e+1]=f(o)o=n.blogic_rshift(t,6)o=n.band(o,63)e[#e+1]=f(o)o=n.band(t,63)e[#e+1]=f(o)l=l+3
end
if#r%3==1 then
local t=n.blshift(r[l],16)t=n.band(t,16711680)local o=n.blogic_rshift(t,18)o=n.band(o,63)e[#e+1]=f(o)o=n.blogic_rshift(t,12)o=n.band(o,63)e[#e+1]=f(o)e[#e+1]=d
e[#e+1]=d
elseif#r%3==2 then
local t=0
local o=n.blshift(r[l],16)o=n.band(o,16711680)t=n.bor(t,o)o=n.blshift(r[l+1],8)o=n.band(o,65280)t=n.bor(t,o)o=n.blogic_rshift(t,18)o=n.band(o,63)e[#e+1]=f(o)o=n.blogic_rshift(t,12)o=n.band(o,63)e[#e+1]=f(o)o=n.blogic_rshift(t,6)o=n.band(o,63)e[#e+1]=f(o)e[#e+1]=d
end
return t.concat(e)end
function u.decode(a)local i=#a
if d then
i=a:find(d,1,true)or(i+1)i=i-1
end
assert(i&gt;0,'Invalid input, cannot decode a padded string with no bytes: '..tostring(a))local t={}local e=1
while e&lt;=i-3 do
local l=0
local o=c(a:sub(e,e))o=n.blshift(o,18)l=n.bor(l,o)e=e+1
o=c(a:sub(e,e))o=n.blshift(o,12)l=n.bor(l,o)e=e+1
o=c(a:sub(e,e))o=n.blshift(o,6)l=n.bor(l,o)e=e+1
o=c(a:sub(e,e))l=n.bor(l,o)e=e+1
o=n.blogic_rshift(l,16)o=n.band(o,255)t[#t+1]=o
o=n.blogic_rshift(l,8)o=n.band(o,255)t[#t+1]=o
o=n.band(l,255)t[#t+1]=o
end
if i%4==2 then
local l=0
local o=c(a:sub(e,e))o=n.blshift(o,18)l=n.bor(l,o)e=e+1
o=c(a:sub(e,e))o=n.blshift(o,12)l=n.bor(l,o)e=e+1
o=n.blogic_rshift(l,16)o=n.band(o,255)t[#t+1]=o
elseif i%4==3 then
local l=0
local o=c(a:sub(e,e))o=n.blshift(o,18)l=n.bor(l,o)e=e+1
o=c(a:sub(e,e))o=n.blshift(o,12)l=n.bor(l,o)e=e+1
o=c(a:sub(e,e))o=n.blshift(o,6)l=n.bor(l,o)e=e+1
o=n.blogic_rshift(l,16)o=n.band(o,255)t[#t+1]=o
o=n.blogic_rshift(l,8)o=n.band(o,255)t[#t+1]=o
elseif i%4==1 then
l('Invalid length input string, extra character: '..tostring(a:sub(e,e)))end
return r.char(unpack(t))end
do
local function r(n)if(n-a.floor(n)&gt;0)then
l('trying to use bitwise operation on non-integer!')end
end
local function e(o)r(o)if(o&lt;0)then
return e(n.bnot(a.abs(o))+1)end
local e={}local n=1
while(o&gt;0)do
local t=a.mod(o,2)if(t==1)then
e[n]=1
else
e[n]=0
end
o=(o-t)/2
n=n+1
end
return e
end
local function l(o)local t=t.getn(o)local n=0
local e=1
for t=1,t do
n=n+o[t]*e
e=e*2
end
return n
end
local function i(e,o)local l={}local n={}if(t.getn(e)&gt;t.getn(o))then
l=e
n=o
else
l=o
n=e
end
for e=t.getn(n)+1,t.getn(l)do
n[e]=0
end
end
local function c(n,r)local o=e(n)local e=e(r)i(o,e)local r={}local n=a.max(t.getn(o),t.getn(e))for n=1,n do
if(o[n]==0 and e[n]==0)then
r[n]=0
else
r[n]=1
end
end
return l(r)end
local function f(n,r)local o=e(n)local e=e(r)i(o,e)local r={}local n=a.max(t.getn(o),t.getn(e))for n=1,n do
if(o[n]==0 or e[n]==0)then
r[n]=0
else
r[n]=1
end
end
return l(r)end
local function o(n)local n=e(n)local e=a.max(t.getn(n),32)for e=1,e do
if(n[e]==1)then
n[e]=0
else
n[e]=1
end
end
return l(n)end
local function u(o,n)local r=e(o)local e=e(n)i(r,e)local o={}local n=a.max(t.getn(r),t.getn(e))for n=1,n do
if(r[n]~=e[n])then
o[n]=1
else
o[n]=0
end
end
return l(o)end
local function d(n,t)r(n)local e=0
if(n&lt;0)then
n=o(a.abs(n))+1
e=2147483648
end
for o=1,t do
n=n/2
n=c(a.floor(n),e)end
return a.floor(n)end
local function s(n,e)r(n)if(n&lt;0)then
n=o(a.abs(n))+1
end
for e=1,e do n=n/2 end
return a.floor(n)end
local function i(n,e)r(n)if(n&lt;0)then
n=o(a.abs(n))+1
end
for e=1,e do n=n*2 end
return f(n,4294967295)end
local function r(t,e)local o=c(o(t),o(e))local e=c(t,e)local e=f(e,o)return e
end
n={bnot=o;band=f;bor=c;bxor=u;brshift=d;blshift=i;bxor2=r;blogic_rshift=s;tobits=e;tonumb=l;}end
return u
end,["typeof"]=function()local n=getfenv or
function()return _ENV end
local n=n().typeof or n().type or function()l('Type/Typeof is undefined. Please define it before loading Conglomeration')end
typeof=function(...)return n(...):lower()end
if(typeof''~='string')then
l('Typeof returns invalid type')end
return typeof;end,["CFrameSerializer"]=function()local e=d('util')local t={}function t:EncodeCFrame(e)local n=e.Position
local e=e.LookVector;return n.X..','..n.Y..','..n.Z..'/'..e.X..','..e.Y..','..e.Z
end
function t:DecodeCFrame(n)n=n:gsub(' ','')local o=e.split_fast(n,'/')local o=e.split_fast(n[1],',')local n=n[2]and e.split_fast(n[2],',')or{0,0,0}local e=Vector3.new(o[1],o[2],o[3]);local n=Vector3.new(n[1],n[2],n[3]);return CFrame.lookAt(e,e+n)end
return t
end,}if n[u]then
return n[u]else
return b(u)end
end
end
local i=d('typeof')local E=d('util')local u=d('Parsers')local b=d('Base64')local f='STANDARD-0.1.0';local o=0
local n={['HEADER_BEGIN']='\1';['END_HEADER_FIELD']='\a';['DATA_NAME']='\3';['DATA_TYPE']='\4';['DATA_LENGTH']='\5';['DATA_LAST']='\v';['DATA_BEGIN']='\6';['FORMAT_VERSION_BEGIN']='\b';['FORMAT_VERSION_END']='\t';}if o~=0 then
f='DEBUGOUT.'..o..'-'..f
if o==1 then
for e in c(n)do n[e]='\n['..e..']'end
elseif o==2 then
for e in c(n)do n[e]='\n- hcode-'..e..': 'end
end
end
for o,e in c(n)do n[e]=o end
local h=function(e)for o,n in c(u)do
if r.lower(n[0])==r.lower(e)then return n end
end
l('No parser found for datatype '..e)end
local s=function(e)local n=n
if o&gt;0 then
local o={}for t,l in c(n)do
o[t]=r.gsub(l,'\n','')e=e:gsub('\n','')end
n=o
end
local o=n.FORMAT_VERSION_BEGIN..f..n.FORMAT_VERSION_END;if not e:sub(1,#o)==o then
l('Incompatible Data Format (Header Mismatch)')end
e=r.sub(e,#o+1,#e)local c={};local e=function(i)local a=({e:find(n.DATA_BEGIN)})[2]if not a then
l('Cannot find DATA_BEGIN ('..n.DATA_BEGIN..')')end
local o=r.sub(e,1,a)local l=function(e)if not e then l('INTERNAL: !hc')end
local t=n.END_HEADER_FIELD
local n=o;local o=({n:find(e)})[1]if not o then l('Cannot find hc: '..e,2)end
n=r.sub(n,o+1)local e=({n:find(t)})[1]if not e then l('Cannot find end-hc',2)end
n=r.sub(n,1,e-1)return n
end
local o={}o.Name=b.decode(l(n.DATA_NAME))o.Type=r.lower(l(n.DATA_TYPE))o.Length=s(l(n.DATA_LENGTH))o.__isLastChunk=l(n.DATA_LAST)=='true'o.Data=r.sub(e,a+1,a+o.Length);if i then t.insert(c,o)end
e=r.sub(e,a+o.Length,#e)return o
end
local n=e();if not n.Name=='\1________checkIntegrety'then
l('Invalid Integrety Check Chunk!\nSpec requires 1st chunk to be an integrety chunk')end
if(not n.__isLastChunk)then
local n={__isLastChunk=false}repeat n=e(true)until n.__isLastChunk
end
return c
end
local d=function(n)local e=h(n.Type)local e=e[1];return e(n.Data)end
local _=function(n)local e=s(n)local n={}for o,e in c(e)do
n[e.Name]=d(e)end
return n
end
local a=function(e,o)if not e then l('No name specified')end
if i(e)~='string'then l('Name is not a string')end
if r.find(e,n.END_HEADER_FIELD)then
l('Name cannot contain the symbol '..n.END_HEADER_FIELD)end
e=b.encode(e)local t=i(o)local n=h(t)local l=n[2];local n={}n.Name=e;n.Type=t;n.Data=l(o);n.Length=#n.Data;return n
end
local o=function(l)local o='';local e=function(...)local n={...}if#n&gt;1 then
return t.concat({...},'')else
return n[1]end
end
local e=function(o,l)local t=n.HEADER_BEGIN
local e=function(...)t=t..e(...)end
e(n.DATA_NAME,o.Name,n.END_HEADER_FIELD)e(n.DATA_TYPE,r.lower(o.Type))e(n.END_HEADER_FIELD)e(n.DATA_LENGTH,o.Length,n.END_HEADER_FIELD)e(n.DATA_LAST,tostring(l),n.END_HEADER_FIELD)e(n.DATA_BEGIN,o.Data)return t
end
for t,n in c(l)do
if t==#l then
o=o..e(n,true)else
o=o..e(n,false)end
end
return n.FORMAT_VERSION_BEGIN..f..n.FORMAT_VERSION_END..e(a('\1________checkIntegrety','works'))..o
end
local e=function(e)local n={}for o,e in c(e)do
t.insert(n,a(o,e))end
return o(n)end
u.table={[0]='table';[1]=function(n)local n=s(n)local e={}for o,n in c(n)do e[n.Name]=d(n)end
return e
end;[2]=function(n)local e={};for n,o in c(n)do
if i(n)~='string'and i(n)~='number'then
l('Only string/number-based keys are allowed for tables!')end
t.insert(e,a(tostring(n),o))end
return o(e)end;}local n={}n.__Parsers=u;n.__ENCODING={['\1']=o;['\2']=a}n.__DECODING={['\1']=s;['\2']=d}n.__Util=E
n.encode=e;n.decode=_;n.stringify=e;n.parse=e;return n</ProtectedString><boolean name="cgl">true</boolean><string name="copyright">Copyright (c) 2021 AstolfoDev. Licensed under the MIT License.</string><int64 name="SourceAssetId">1</int64></Properties></Item></roblox>